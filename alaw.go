package g711

var a2µ = []uint8{
	0x01, 0x03, 0x05, 0x07, 0x09, 0x0b, 0x0d, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23,
	0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
	0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x30, 0x31, 0x31,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x40,
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
}

/* ToAlaw compresses a 16-bit signed PCM sample to an aLaw byte.
 *
 * Linear Code  Compressed Code
 * ------------ ---------------
 * 0000000wxyza 000wxyz
 * 0000001wxyza 001wxyz
 * 000001wxyzab 010wxyz
 * 00001wxyzabc 011wxyz
 * 0001wxyzabcd 100wxyz
 * 001wxyzabcde 101wxyz
 * 01wxyzabcdef 110wxyz
 * 1wxyzabcdefg 111wxyz
 */
func ToALaw(pcm int16) uint8 {
	var (
		seg        uint16
		aval, mask uint8
	)

	if pcm >= 0 {
		mask = 0xd5 /* sign (7th) bit = 1  */
	} else {
		mask = 0x55 /* sign bit = 0 */
		pcm = -pcm - 8
	}

	/* Convert the scaled magnitude to segment number. */
	seg = search(uint16(pcm), segEnd, 8)

	/* Combine the sign, segment, and quantization bits. */
	if seg < 8 {
		aval = uint8(seg << SegShift)
		if seg < 2 {
			aval |= uint8(pcm>>4) & QuantMask
		} else {
			aval |= uint8(pcm>>(seg+3)) & QuantMask
		}

	} else {
		/* out of range, return maximum value. */
		aval = 0x7f
	}

	return aval ^ mask
}

// FromAlaw decompresses an aLaw byte to a 16-bit signed PCM sample.
func FromALaw(val uint8) int16 {
	var (
		t   int16
		seg uint16
	)

	val ^= 0x55
	t = (int16(val) & QuantMask) << 4
	seg = (uint16(val) & SegMask) >> SegShift
	switch seg {
	case 0:
		t += 8
	case 1:
		t += 0x0108
	default:
		t += 0x0108
		t <<= seg - 1
	}

	if val&SignBit == SignBit {
		return t
	}
	return -t
}

// Convert an aLaw byte to an µLaw byte
func ALawToMLaw(val uint8) uint8 {
	val &= 0xff
	if val&0x80 == 0x80 {
		return 0xff ^ a2µ[val^0xd5]
	}
	return 0x7f ^ a2µ[val^0x55]
}
